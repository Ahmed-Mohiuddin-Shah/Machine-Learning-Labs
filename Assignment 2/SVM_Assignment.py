from pathlib import Path

# Define the structure and content for the Jupyter Notebook
notebook_content = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# CS471 Assignment 2 - Support Vector Machines\n",
                "## Tasks: Classification and Regression using SVM\n",
                "This notebook implements both linear and non-linear SVM for classification and regression tasks.\n",
                "\n",
                "### Objectives:\n",
                "1. Implement and evaluate SVM for the Rock Classification Dataset.\n",
                "2. Implement and evaluate SVM for the Theme Park Visitor Count Dataset.\n",
                "3. Compare the performance of linear and non-linear models for both tasks.\n",
                "\n",
            ],
        },
        {"cell_type": "markdown", "metadata": {}, "source": ["## Environment Setup"]},
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Import necessary libraries\n",
                "import numpy as np\n",
                "import pandas as pd\n",
                "import matplotlib.pyplot as plt\n",
                "import seaborn as sns\n",
                "from sklearn.model_selection import train_test_split, GridSearchCV\n",
                "from sklearn.svm import SVC, SVR\n",
                "from sklearn.preprocessing import StandardScaler\n",
                "from sklearn.metrics import (\n",
                "    accuracy_score, classification_report, confusion_matrix, roc_auc_score,\n",
                "    mean_absolute_error, mean_squared_error, r2_score\n",
                ")\n",
                'sns.set(style="whitegrid")\n',
                "\n",
                "# Configure visualizations\n",
                "plt.rcParams['figure.figsize'] = (10, 6)\n",
                "plt.rcParams['axes.grid'] = True",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1. Classification Task (Rock Dataset)"],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["### Load and Explore the Dataset"],
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Load the Rock Classification Dataset\n",
                "rock_data = pd.DataFrame({\n",
                "    'Area': [28395, 28734, 29380],\n",
                "    'Perimeter': [610.291, 638.018, 624.11],\n",
                "    'MajorAxisLength': [208.1781167, 200.5247957, 212.8261299],\n",
                "    'MinorAxisLength': [173.888747, 182.7344194, 175.9311426],\n",
                "    'AspectRation': [1.197191424, 1.097356461, 1.209712656],\n",
                "    'Eccentricity': [0.549812187, 0.411785251, 0.562727317],\n",
                "    'ConvexArea': [28715, 29172, 29690],\n",
                "    'EquivDiameter': [190.1410973, 191.2727505, 193.4109041],\n",
                "    'Extent': [0.763922518, 0.783968133, 0.778113248],\n",
                "    'Solidity': [0.988855999, 0.984985603, 0.989558774],\n",
                "    'Roundness': [0.958027126, 0.887033637, 0.947849473],\n",
                "    'Compactness': [0.913357755, 0.953860842, 0.908774239],\n",
                "    'ShapeFactor1': [0.007331506, 0.006978659, 0.007243912],\n",
                "    'ShapeFactor2': [0.003147289, 0.003563624, 0.003047733],\n",
                "    'ShapeFactor3': [0.834222388, 0.909850506, 0.825870617],\n",
                "    'ShapeFactor4': [0.998723889, 0.998430331, 0.999066137],\n",
                "    'Class': [1, 1, 1]\n",
                "})\n",
                "\n",
                "# Display dataset\n",
                "rock_data.head()",
            ],
        },
        {"cell_type": "markdown", "metadata": {}, "source": ["### Data Preprocessing"]},
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Check for missing values\n",
                "rock_data.isnull().sum()\n",
                "\n",
                "# Normalize features\n",
                "features = rock_data.drop('Class', axis=1)\n",
                "scaler = StandardScaler()\n",
                "features_scaled = scaler.fit_transform(features)\n",
                "\n",
                "# Prepare data for modeling\n",
                "X = features_scaled\n",
                "y = rock_data['Class']\n",
                "\n",
                "# Split into training and testing sets\n",
                "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["### SVM Classification - Linear Kernel"],
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Train a linear SVM\n",
                "linear_svm = SVC(kernel='linear', C=1)\n",
                "linear_svm.fit(X_train, y_train)\n",
                "\n",
                "# Evaluate the model\n",
                "y_pred_linear = linear_svm.predict(X_test)\n",
                "accuracy = accuracy_score(y_test, y_pred_linear)\n",
                "print(f'Linear SVM Accuracy: {accuracy:.2f}')",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["### Continue with Non-Linear SVM and Regression Tasks"],
        },
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3",
        },
        "language_info": {
            "codemirror_mode": {"name": "ipython", "version": 3},
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.8.5",
        },
    },
    "nbformat": 4,
    "nbformat_minor": 4,
}

# Save notebook to a file
notebook_path = Path("./SVM_Assignment.ipynb")
notebook_path.write_text(str(notebook_content))
